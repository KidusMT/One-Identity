package com.gdg.app.data.db.model.person;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "user".
*/
public class PersonDao extends AbstractDao<Person, String> {

    public static final String TABLENAME = "user";

    /**
     * Properties of entity Person.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Fname = new Property(1, String.class, "fname", false, "FNAME");
        public final static Property Mname = new Property(2, String.class, "mname", false, "MNAME");
        public final static Property Lname = new Property(3, String.class, "lname", false, "LNAME");
        public final static Property Dob = new Property(4, String.class, "dob", false, "DOB");
        public final static Property Gender = new Property(5, String.class, "gender", false, "GENDER");
        public final static Property Citizenship = new Property(6, String.class, "citizenship", false, "CITIZENSHIP");
        public final static Property Residence = new Property(7, String.class, "residence", false, "RESIDENCE");
        public final static Property Hometown = new Property(8, String.class, "hometown", false, "HOMETOWN");
        public final static Property MaritalStatus = new Property(9, String.class, "maritalStatus", false, "MARITAL_STATUS");
        public final static Property PhotoUrl = new Property(10, String.class, "photoUrl", false, "PHOTO_URL");
        public final static Property FingerPrint = new Property(11, String.class, "fingerPrint", false, "FINGER_PRINT");
        public final static Property PhoneNumber = new Property(12, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property Region = new Property(13, String.class, "region", false, "REGION");
        public final static Property City = new Property(14, String.class, "city", false, "CITY");
        public final static Property SubCity = new Property(15, String.class, "subCity", false, "SUB_CITY");
        public final static Property Woreda = new Property(16, String.class, "woreda", false, "WOREDA");
        public final static Property HouseNo = new Property(17, String.class, "houseNo", false, "HOUSE_NO");
        public final static Property CreatedDate = new Property(18, String.class, "createdDate", false, "CREATED_DATE");
        public final static Property V = new Property(19, Integer.class, "v", false, "V");
    }


    public PersonDao(DaoConfig config) {
        super(config);
    }
    
    public PersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"user\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"FNAME\" TEXT," + // 1: fname
                "\"MNAME\" TEXT," + // 2: mname
                "\"LNAME\" TEXT," + // 3: lname
                "\"DOB\" TEXT," + // 4: dob
                "\"GENDER\" TEXT," + // 5: gender
                "\"CITIZENSHIP\" TEXT," + // 6: citizenship
                "\"RESIDENCE\" TEXT," + // 7: residence
                "\"HOMETOWN\" TEXT," + // 8: hometown
                "\"MARITAL_STATUS\" TEXT," + // 9: maritalStatus
                "\"PHOTO_URL\" TEXT," + // 10: photoUrl
                "\"FINGER_PRINT\" TEXT," + // 11: fingerPrint
                "\"PHONE_NUMBER\" TEXT," + // 12: phoneNumber
                "\"REGION\" TEXT," + // 13: region
                "\"CITY\" TEXT," + // 14: city
                "\"SUB_CITY\" TEXT," + // 15: subCity
                "\"WOREDA\" TEXT," + // 16: woreda
                "\"HOUSE_NO\" TEXT," + // 17: houseNo
                "\"CREATED_DATE\" TEXT," + // 18: createdDate
                "\"V\" INTEGER);"); // 19: v
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"user\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Person entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String fname = entity.getFname();
        if (fname != null) {
            stmt.bindString(2, fname);
        }
 
        String mname = entity.getMname();
        if (mname != null) {
            stmt.bindString(3, mname);
        }
 
        String lname = entity.getLname();
        if (lname != null) {
            stmt.bindString(4, lname);
        }
 
        String dob = entity.getDob();
        if (dob != null) {
            stmt.bindString(5, dob);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(6, gender);
        }
 
        String citizenship = entity.getCitizenship();
        if (citizenship != null) {
            stmt.bindString(7, citizenship);
        }
 
        String residence = entity.getResidence();
        if (residence != null) {
            stmt.bindString(8, residence);
        }
 
        String hometown = entity.getHometown();
        if (hometown != null) {
            stmt.bindString(9, hometown);
        }
 
        String maritalStatus = entity.getMaritalStatus();
        if (maritalStatus != null) {
            stmt.bindString(10, maritalStatus);
        }
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(11, photoUrl);
        }
 
        String fingerPrint = entity.getFingerPrint();
        if (fingerPrint != null) {
            stmt.bindString(12, fingerPrint);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(13, phoneNumber);
        }
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(14, region);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(15, city);
        }
 
        String subCity = entity.getSubCity();
        if (subCity != null) {
            stmt.bindString(16, subCity);
        }
 
        String woreda = entity.getWoreda();
        if (woreda != null) {
            stmt.bindString(17, woreda);
        }
 
        String houseNo = entity.getHouseNo();
        if (houseNo != null) {
            stmt.bindString(18, houseNo);
        }
 
        String createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindString(19, createdDate);
        }
 
        Integer v = entity.getV();
        if (v != null) {
            stmt.bindLong(20, v);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Person entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String fname = entity.getFname();
        if (fname != null) {
            stmt.bindString(2, fname);
        }
 
        String mname = entity.getMname();
        if (mname != null) {
            stmt.bindString(3, mname);
        }
 
        String lname = entity.getLname();
        if (lname != null) {
            stmt.bindString(4, lname);
        }
 
        String dob = entity.getDob();
        if (dob != null) {
            stmt.bindString(5, dob);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(6, gender);
        }
 
        String citizenship = entity.getCitizenship();
        if (citizenship != null) {
            stmt.bindString(7, citizenship);
        }
 
        String residence = entity.getResidence();
        if (residence != null) {
            stmt.bindString(8, residence);
        }
 
        String hometown = entity.getHometown();
        if (hometown != null) {
            stmt.bindString(9, hometown);
        }
 
        String maritalStatus = entity.getMaritalStatus();
        if (maritalStatus != null) {
            stmt.bindString(10, maritalStatus);
        }
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(11, photoUrl);
        }
 
        String fingerPrint = entity.getFingerPrint();
        if (fingerPrint != null) {
            stmt.bindString(12, fingerPrint);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(13, phoneNumber);
        }
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(14, region);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(15, city);
        }
 
        String subCity = entity.getSubCity();
        if (subCity != null) {
            stmt.bindString(16, subCity);
        }
 
        String woreda = entity.getWoreda();
        if (woreda != null) {
            stmt.bindString(17, woreda);
        }
 
        String houseNo = entity.getHouseNo();
        if (houseNo != null) {
            stmt.bindString(18, houseNo);
        }
 
        String createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindString(19, createdDate);
        }
 
        Integer v = entity.getV();
        if (v != null) {
            stmt.bindLong(20, v);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Person readEntity(Cursor cursor, int offset) {
        Person entity = new Person( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dob
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // citizenship
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // residence
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // hometown
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // maritalStatus
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // photoUrl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fingerPrint
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // phoneNumber
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // region
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // city
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // subCity
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // woreda
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // houseNo
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // createdDate
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19) // v
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Person entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDob(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCitizenship(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setResidence(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHometown(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMaritalStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhotoUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFingerPrint(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPhoneNumber(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRegion(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCity(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSubCity(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setWoreda(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setHouseNo(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCreatedDate(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setV(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Person entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Person entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Person entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
